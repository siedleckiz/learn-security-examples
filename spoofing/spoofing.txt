Briefly explain the vulnerability and why the secure version prevents the vulnerability.

The vulnerability is that we send the cookie automatically with every request.
So a malicious attacker can inject a script into a webpage link to get the session ID.
So if a user clicks on the malicious link then the malicious attacker will get access to the session ID.

Once a malicious attacker has the session ID they can do further damage. They can force user to click on link.
After clicking on this link, the malicious attacker access a sensitive endpoint on a server using the session ID.
This is called a cross-site request forgery.

The secure version prevents this vulnerability by setting httpOnly and sameSite flags to true. By setting httpOnly to true we make
the cookie unreadable programatically. As a result we cannot use the script in mal-steal-cookie.html to obtain the session ID.
The sameSite flag means that the cookie in the session ID will only be sent if the request is coming from the same origin.
This prevents the browser from sending this cookie along with cross-site requests.
This prevents the issue of where we could access the sensitive endpoint by using a cross-site request forgery.
